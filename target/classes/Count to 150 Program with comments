# Program number  1:
# This program allocates 150 words of dynamic memory (from the Hypo user dynamic
# memory) using Mem_alloc system call described in the MTOPS handout.
# It fills (sets) the allocated memory with numbers 1, 2, 3, 4, …, 150 then halts.

# Instructions used:
# NAME      OP-CODE Description
# Halt      0       Halt execution
# Add       1       Op1 op1 + op2
# Subtract  2       Op1 op1 – op2
# Move      5       Op1 op2

# Branch on minus   7   If Op1 < 0 then PC next word of the instruction. 
#                       Op2 is not used.

# System Call       12  Op1 has system call ID as immediate operand. That is, 
#                       second word of the instruction has the system call 
#                       identifier.  Op2 is not used.

# Addressing modes used:
# 0 Invalid/not used	Mode digit is not used in the instruction

# 1 Register mode		The specified general purpose register contains the 
#                       operand value.

# 3 Auto-increment		Register content is incremented by 1 after fetching the 
#                       operand's address

# 5 Direct mode         Next word contains the address of the operand. 
#                       Operand value is in the main memory. A general purpose
#                       register is not used. Use PC to get the address.

# 6 Immediate mode      Next word contains the operand value. Operand value was loaded into the application 
#						memory when this program was loaded by the machine. A general purpose register is 
#						not used. Address is in the program counter.

#Address-Content/Value
#  op M R M R     op: operation code, M: mode, R: register
11 5  1 2 6 0   # Assign the size of the memory request (150) to GPR # 2. Program starts at address number 
				# 11 because the Null Process program precedes it.

12   150        # 150 is the size of the memory request and also the limit for the loop count.

13 12 6 0 0 0   # Requests a memory stack from the operating system

14   4          # The number four is the code for requesting memory.

15  7 1 0 0 0   # End if system call returns error

16   28

17  5 1 4 1 1   # Copies the first allocated address of the process's newly 
                #acquired memory from GPR # 1 to GPR # 4.

18  1 1 5 6 0   # Increment count value by one.

19   1

20  5 3 4 1 5   # Assign the appropriate number to the current memory address 
                # The address in GPR #4 and value count in GPR # 5 is 
                # auto incremented by the auto increment mode by one.
                
21  5 1 6 1 5   # Copies current value of count to general purpose register number 6

22  2 1 6 5 0   # Compares current value of count to its maximum amount through subtraction
            
23   12       

24  7 1 6 0 0   # Loops if maximum value for count has not been reached.
25   18

26 12 6 0 0 0
27   7

28  0 0 0 0 0   # Halt in the case of the program finishing