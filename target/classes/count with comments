# Program number  1:
# This program allocates 150 words of dynamic memory (from the Hypo user dynamic
# memory) using Mem_alloc system call described in the MTOPS handout.
# It fills (sets) the allocated memory with numbers 1, 2, 3, 4, …, 150 then halts.

# Instructions used:
# NAME      OP-CODE Description
# Halt      0       Halt execution
# Add       1       Op1 op1 + op2
# Subtract  2       Op1 op1 – op2
# Move      5       Op1 op2

# Branch on minus   7   If Op1 < 0 then PC next word of the instruction. 
#                       Op2 is not used.

# Request memory    12  The second word is the size of the memory requested

# Addressing modes used:
# 0 Invalid/not used	Mode digit is not used in the instruction

# 1 Register mode		The specified general purpose register contains the 
#                       operand value.

# 3 Auto-increment		Register content is incremented by 1 after fetching the 
#                       operand's address

# 5 Direct mode         Next word contains the address of the operand. 
#                       Operand value is in the main memory. A general purpose
#                       register is not used. Use PC to get the address.

# 6 Immediate mode      Next word contains the operand value. Operand value was loaded into the 
#						application memory when this program was loaded by the machine. A 
#						general purpose register is not used. Address is in the program counter.

#Address-Content/Value
#  op M R M R     op: operation code, M: mode, R: register

0	5 1 1 6 0	# Sets the count to zero at register number one
1    0

2	3 1 2 0 0	# Gets the program's origin address in application memory and stores it to register number 2

3	1 1 2 6 0	# Sets the start of loop address at register two
4    5

5	1 1 1 6 0   # Increments number one register one by one
6	 1

7 12 1 1 0 0   # Store the contents of register number 1 into output memory
                
8  5 1 3 1 1   # Copies current value of the count in register one to register three

9  2 1 3 6 0   # Compares current value of the count to its maximum amount through      
10   150       	# subtracting the maximum count

11  7 1 3 1 2   # Loops if maximum value for count has not been reached.

12  0 0 0 0 0   # Halt in the case of the program finishing